{"version":3,"sources":["components/AddCategory.js","helpers/getGifts.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,+BCPnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QATtB,kBAaZM,GAbY,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAKA,EAAL,WCHCO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAqBtC,OAdAC,qBAAU,WAENxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAEGqB,EDlB0BK,CAAa1B,GAAjCa,EAFwB,EAE7BN,KAAaa,EAFgB,EAEhBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,yCAAd,SAAwDhB,IAExD,sBAAKgB,UAAU,YAAf,UAEKI,GAAW,mBAAGJ,UAAU,wCAAb,qBAEXH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,cEdpBgB,EAAe,WAAO,IAAD,EAEMzC,mBAAS,CAAC,cAFhB,mBAEvB0C,EAFuB,KAEX3C,EAFW,KAI9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAGA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCblC6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.1c6257fb.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const hanldeInputChange = (e) =>{\n        setInputValue( e.target.value );\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if( inputValue.trim().length > 2){\n            setCategories( cats => [ inputValue, ...cats] );\n            setInputValue('');\n        }\n\n    };\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={ inputValue }\n                onChange={ hanldeInputChange }/>\n        </form>\n       \n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\n\n\n// preventDefault() evita que el navegador se refresque cuando se realiza el submit","\nexport const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=MykDWEthCsIpCnnQeMFbDKEDQtn40BEN`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images.downsized_medium.url\n        }\n    });\n\n    return gifs;\n};","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={url} alt={title} />\n            <p> {title} </p>\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"card animate__animated animate__fadeIn\">{category}</h3>\n\n            <div className=\"card-grid\">\n\n                {loading && <p className=\"card animate__animated animate__flash\">Loading</p>}\n\n                {images.map(img =>\n                    <GifGridItem\n                        key={img.id}\n                        {...img}\n                    />\n                )\n                }\n\n            </div>\n        </>\n    )\n}\n\n\n/*  useEffect() se utiliza para llamar a una funcion dependiendo de una condiciÃ³n\n    [ category ] -> Si la categoria cambia, se vuelve a ejecutar el useEffect\n\n*/","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifts';\n\nexport const useFetchGifs = (category) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs => {\n\n                setstate({\n                    data: imgs,\n                    loading: false\n                })\n\n            });\n\n    }, [category]);\n\n    return state;\n\n}\n\n\n\n/*\n    HOOKS -> Funcionan como funcional components.\n*/","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory'\nimport { GifGrid } from './components/GifGrid'\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch'])\n    \n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr/>\n\n            \n            <ol>\n                {\n                    categories.map( category => \n                        <GifGrid\n                            key={ category }\n                            category={ category }\n                        />\n                    )\n                }\n            </ol>\n        </>\n    )\n}\n\n\n\n\n\n\n\n/* Agregando elementos a un array definido por UseState\n\nOperado Spread [... array] Copia el elemento, puedo pasarle mas items como en el ejemplo ---> setCategories( [...categories, 'Nueva Categoria'] )\n\nSe puede recibir un callback con el elemento y regresar un nuevo arreglo ---> setCategories( cats => [...cats, 'Attack on titan'] );\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}